//This File Is Auto Generated By Process Config
using System.Collections.Generic;
using System.Linq;
using Newtonsoft.Json.Linq;

public class DataLevel : IData
{
	public List<int> LevelUnlocked = new List<int>();
	public int TutorUINum;
	public int TutorSoundNum;
	public Dictionary<int, int> LevelScoreDict = new Dictionary<int, int>();
	public bool UseTutorUI;
	public bool UseTutorSound;
	public int GameTimes;
	public int NewItem;
	public void LoadFromJson(JObject jobject)
	{
		JsonUtil.ToList(jobject, "LevelUnlocked", ref LevelUnlocked);
		TutorUINum = (int)jobject["TutorUINum"];
		TutorSoundNum = (int)jobject["TutorSoundNum"];
		var LevelScoreKey = new List<int>();
		JsonUtil.ToList(jobject, "LevelScoreKey", ref LevelScoreKey);
		var LevelScoreValue = new List<int>();
		JsonUtil.ToList(jobject, "LevelScoreValue", ref LevelScoreValue);
		for(int i = 0; i < LevelScoreKey.Count; i++)
		{
			LevelScoreDict[LevelScoreKey[i]] = LevelScoreValue[i];
		}
		UseTutorUI = (bool)jobject["UseTutorUI"];
		UseTutorSound = (bool)jobject["UseTutorSound"];
		GameTimes = (int)jobject["GameTimes"];
		NewItem = (int)jobject["NewItem"];
	}
	public void SaveToJson(JObject jobject)
	{
		jobject.Add("LevelUnlocked", JsonUtil.ToJArray(LevelUnlocked));
		jobject.Add("TutorUINum", TutorUINum);
		jobject.Add("TutorSoundNum", TutorSoundNum);
		var LevelScoreKey = LevelScoreDict.Keys.ToList();
		jobject.Add("LevelScoreKey", JsonUtil.ToJArray(LevelScoreKey));
		var LevelScoreValue = LevelScoreDict.Values.ToList();
		jobject.Add("LevelScoreValue", JsonUtil.ToJArray(LevelScoreValue));
		jobject.Add("UseTutorUI", UseTutorUI);
		jobject.Add("UseTutorSound", UseTutorSound);
		jobject.Add("GameTimes", GameTimes);
		jobject.Add("NewItem", NewItem);
	}
	public void AddLevelUnlockedData(int data)
	{
		LevelUnlocked.Add(data);
	}
	public void RemoveLevelUnlockedData(int data)
	{
		LevelUnlocked.Remove(data);
	}
	public int GetLevelUnlockedData(int dataIndex)
	{
		return LevelUnlocked[dataIndex];
	}
	public void AddLevelScoreDictData(int dataKey, int value)
	{
		LevelScoreDict[dataKey] = GetLevelScoreDictData(dataKey) + value;
	}
	public void RemoveLevelScoreDictData(int dataKey)
	{
		LevelScoreDict.Remove(dataKey);
	}
	public int GetLevelScoreDictData(int dataKey)
	{
		int result = 0;
		LevelScoreDict.TryGetValue(dataKey, out result);
		return result;
	}
}
public partial class DataSystem
{
	DataLevel m_DataLevel;

	public DataLevel GetDataLevel()
	{
		if (m_DataLevel == null)
		{
			m_DataLevel = new DataLevel();
		}
		return m_DataLevel;
	}

	public void SaveDataLevel()
	{
		SaveJsonFile("Data_Level", m_DataLevel);
	}
	public void LoadDataLevel()
	{
		LoadJsonFile("Data_Level", ref m_DataLevel);
	}
}