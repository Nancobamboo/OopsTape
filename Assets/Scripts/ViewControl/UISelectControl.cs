//This File Is Auto Generated By Process Control
using UnityEngine;
using System;
using Cysharp.Threading.Tasks;
using System.Threading;

public enum UISelectAnimState
{
	Idel,
	UIselectUnlock,
	UISelectThis
}

public class UISelectControl : YViewControl
{
	public enum ESceneName
	{
		GameEntry,
		Level01_Chips,
		Level02_Koala,
		Level03_Fly,
		Level04_Sing,
		Upper
	}
	private UISelectView m_View;
	private int m_SelectedLevel = -1;
	private DataLevel m_DataLevel;
	private ESceneName m_SelectedSceneName;

	private ESceneName[] m_ButtonSceneMap = new ESceneName[]
	{
		ESceneName.Level04_Sing,
		ESceneName.Level03_Fly,
		ESceneName.Level01_Chips,
		ESceneName.Level02_Koala
	};

	public static EResType GetResType()
	{
		return EResType.UISelect;
	}

	protected override void OnInit()
	{
		base.OnInit();
		m_View = CreateView<UISelectView>();
		m_DataLevel = DataSystem.Instance.GetDataLevel();

		m_View.BtnLevel1.onClick.AddListener(() => OnLevelClick(0));
		m_View.BtnLevel2.onClick.AddListener(() => OnLevelClick(1));
		m_View.BtnLevel3.onClick.AddListener(() => OnLevelClick(2));
		m_View.BtnLevel4.onClick.AddListener(() => OnLevelClick(3));
		m_View.BtnSpace.onClick.AddListener(OnLevelConfirm);

		// m_View.Lock1.gameObject.SetActive(false);
		// m_View.Lock2.gameObject.SetActive(false);
		// m_View.Lock3.gameObject.SetActive(false);
		// m_View.Lock4.gameObject.SetActive(false);
	}

	public void PlayLevelAnim(int levelIndex, UISelectAnimState animState)
	{
		if (levelIndex < 0 || levelIndex >= 4) return;

		Animator[] animators = new Animator[] { m_View.Level1, m_View.Level2, m_View.Level3, m_View.Level4 };
		animators[levelIndex].Play(animState.ToString(), 0);
	}

	private void Start()
	{
		var tutorControl = Asset.OpenUI<UISelectTutorControl>();
		tutorControl.SetData();
		UpdateLevelStates();
	}

	public void OnLevelConfirm()
	{
		Debug.Log("OnLevelConfirm: " + m_SelectedSceneName);
		string sceneNameStr = m_SelectedSceneName.ToString();
		Asset.TryLoadScene(sceneNameStr);
	}

	private void UpdateLevelStates()
	{
		Animator[] animators = new Animator[] { m_View.Level1, m_View.Level2, m_View.Level3, m_View.Level4 };
		RectTransform[] locks = new RectTransform[] { m_View.Lock1, m_View.Lock2, m_View.Lock3, m_View.Lock4 };

		for (int i = 0; i < animators.Length; i++)
		{
			ESceneName sceneName = m_ButtonSceneMap[i];
			bool isUnlocked = m_DataLevel.LevelUnlocked.Contains((int)sceneName);

			if (isUnlocked)
			{
				animators[i].CrossFade(UISelectAnimState.UIselectUnlock.ToString(), 0, 0);
				WaitForAnimationAndHideLock(animators[i], locks[i], i).Forget();
			}
			else
			{
				animators[i].CrossFade(UISelectAnimState.Idel.ToString(), 0, 0);
			}
		}
	}

	private async UniTaskVoid WaitForAnimationAndHideLock(Animator animator, RectTransform lockObj, int levelIndex)
	{
		string animStateName = UISelectAnimState.UIselectUnlock.ToString();

		await UniTask.WaitUntil(() =>
		{
			AnimatorStateInfo stateInfo = animator.GetCurrentAnimatorStateInfo(0);
			return stateInfo.IsName(animStateName);
		}, cancellationToken: this.GetCancellationTokenOnDestroy());

		await UniTask.WaitUntil(() =>
		{
			AnimatorStateInfo stateInfo = animator.GetCurrentAnimatorStateInfo(0);
			return stateInfo.IsName(animStateName) && stateInfo.normalizedTime >= 1.0f;
		}, cancellationToken: this.GetCancellationTokenOnDestroy());

		lockObj.gameObject.SetActive(false);
		OnLevelClick(levelIndex);
	}

	public void OnLevelClick(int levelIndex)
	{
		Debug.Log("OnLevelClick: " + levelIndex);
		if (levelIndex < 0 || levelIndex >= 4) return;

		ESceneName sceneName = m_ButtonSceneMap[levelIndex];
		if (!m_DataLevel.LevelUnlocked.Contains((int)sceneName)) return;

		Animator[] animators = new Animator[] { m_View.Level1, m_View.Level2, m_View.Level3, m_View.Level4 };

		m_SelectedLevel = levelIndex;
		m_SelectedSceneName = sceneName;

		for (int i = 0; i < animators.Length; i++)
		{
			if (i == levelIndex)
			{
				animators[i].CrossFade(UISelectAnimState.UISelectThis.ToString(), 0, 0);
			}
			else
			{
				animators[i].CrossFade(UISelectAnimState.Idel.ToString(), 0, 0);
			}
		}
	}

	private void Update()
	{
		if (Input.GetKeyDown(KeyCode.Space))
		{
			OnLevelConfirm();
		}
	}

	protected override void OnReturn()
	{
		base.OnReturn();
	}
}