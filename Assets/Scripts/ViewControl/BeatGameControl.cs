//This File Is Auto Generated By Process Control
using UnityEngine;
using System.Collections.Generic;
using System.IO;

public class BeatGameControl : YViewControl
{
	private BeatGameView m_View;
	private Dictionary<string, Animator> m_AnimatorDict = new Dictionary<string, Animator>();
	private BeatTimelineJson m_TimelineData;
	private BeatUtility.BeatTimeline m_Timeline;
	private Dictionary<int, BeatUnit> m_BeatUnitById = new Dictionary<int, BeatUnit>();
	private double m_SongStartDsp;
	private double m_PausedDspDuration;
	private double m_SecondsPerBeat;
	private double m_SongOffsetSeconds;
	private bool m_IsScheduled;
	private float m_GoodWindowBeats = 1f / 6f;
	public static BeatGameControl Instance { get; private set; }
	public int CurrentBeat = -1;
	private UIBeatGuideControl m_BeatGuide;

	public AudioSource m_BeatSource;

	public static EResType GetResType()
	{
		return EResType.None;
	}

	protected override void OnInit()
	{
		base.OnInit();
		m_View = CreateView<BeatGameView>();
		Instance = this;
		if (m_View != null) m_View.Asset = this.Asset;
	}

	private void Start()
	{
		SetData();
	}


	public void SetData()
	{
		Animator[] animators = GameObject.FindObjectsByType<Animator>(FindObjectsSortMode.None);
		for (int i = 0; i < animators.Length; i++)
		{
			Animator a = animators[i];
			GameObject go = a.gameObject;
			m_AnimatorDict[go.name] = a;
		}

		AudioSource[] sources = GameObject.FindObjectsByType<AudioSource>(FindObjectsSortMode.None);
		if (sources != null && sources.Length > 0)
		{
			m_BeatSource = sources[0];
			if (sources.Length > 1)
			{
				Debug.LogWarning("Multiple AudioSource found. Using the first one: " + m_BeatSource.gameObject.name);
			}
		}

		if (m_BeatSource != null && m_BeatSource.clip != null)
		{
			string audioName = m_BeatSource.clip.name;
			string folder = Path.Combine(Application.dataPath, "BeatExports");
			string file = audioName + "_timeline.json";
			string path = Path.Combine(folder, file);
			if (File.Exists(path))
			{
				string json = File.ReadAllText(path);
				m_TimelineData = JsonUtility.FromJson<BeatTimelineJson>(json);
				m_Timeline = BeatUtility.FromJson(json);
				m_BeatUnitById.Clear();
				if (m_TimelineData != null && m_TimelineData.BeatUnits != null)
				{
					for (int i = 0; i < m_TimelineData.BeatUnits.Count; i++)
					{
						BeatUnit u = m_TimelineData.BeatUnits[i];
						m_BeatUnitById[u.BeatId] = u;
					}
				}
				m_SecondsPerBeat = m_Timeline.SecondsPerBeat;
				m_SongOffsetSeconds = m_Timeline.OffsetSeconds;
				m_PausedDspDuration = 0.0;
				double lead = 0.1;
				m_SongStartDsp = AudioSettings.dspTime + lead;
				m_BeatSource.time = 0f;
				m_BeatSource.PlayScheduled(m_SongStartDsp);
				m_IsScheduled = true;
				CurrentBeat = -1;

				if (m_BeatGuide == null)
				{
					m_BeatGuide = Asset.OpenUI<UIBeatGuideControl>();
				}
				if (m_BeatGuide != null)
				{
					m_BeatGuide.SetData(m_BeatUnitById);
				}
			}
			else
			{
				Debug.LogWarning("BeatExports json not found: " + path);
			}
		}
	}

	private void Update()
	{
		if (m_BeatSource == null || m_TimelineData == null || !m_IsScheduled) return;
		if (AudioSettings.dspTime < m_SongStartDsp) return;
		double dsp = AudioSettings.dspTime;
		double playerBeat = (dsp - m_SongStartDsp - m_PausedDspDuration - m_SongOffsetSeconds) / m_SecondsPerBeat;
		int newBeat = (int)System.Math.Round(playerBeat);
		if (newBeat != CurrentBeat)
		{
			CurrentBeat = newBeat;
			if (m_BeatGuide != null) m_BeatGuide.UpdateBeatTip(CurrentBeat);
			BeatUnit unit = GetBeatUnit(CurrentBeat);
			if (unit != null)
			{
				bool pressed = Input.GetKeyDown(KeyCode.Space);
				bool hit = false;
				if (unit.IsHit && pressed)
				{
					double clipTime = dsp - m_SongStartDsp - m_PausedDspDuration;
					double beatTime = m_Timeline.GetTimeOfBeat(CurrentBeat);
					double delta = System.Math.Abs(clipTime - beatTime);
					double windowSeconds = m_SecondsPerBeat * m_GoodWindowBeats;
					hit = delta <= windowSeconds;
				}

				if (unit.IsHit)
				{
					for (int i = 0; i < unit.SceneObjects.Count; i++)
					{
						bool play = hit ? (i % 2 == 0) : (i % 2 == 1);
						if (!play) continue;
						string goName = unit.SceneObjects[i];
						string anim = unit.AnimList[i];
						Animator a = GetAnimator(goName);
						if (a != null)
						{
							a.CrossFade(anim, 0, 0);
						}
					}
				}
				else
				{
					for (int i = 0; i < unit.SceneObjects.Count; i++)
					{
						string goName = unit.SceneObjects[i];
						string anim = unit.AnimList[i];
						Animator a = GetAnimator(goName);
						if (a != null)
						{
							Debug.Log("CrossFade: " + goName + " " + anim);
							a.CrossFade(anim, 0, 0);
						}
					}
				}
			}
		}
	}

	public Animator GetAnimator(string name)
	{
		if (string.IsNullOrEmpty(name)) return null;
		Animator a;
		if (m_AnimatorDict.TryGetValue(name, out a)) return a;
		return null;
	}

	public BeatUnit GetBeatUnit(int beatId)
	{
		BeatUnit u;
		if (m_BeatUnitById.TryGetValue(beatId, out u)) return u;
		return null;
	}


}