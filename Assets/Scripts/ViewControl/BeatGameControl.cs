//This File Is Auto Generated By Process Control
using UnityEngine;
using System.Collections.Generic;
using System.IO;

public class BeatGameControl : YViewControl
{
	private BeatGameView m_View;
	private Dictionary<string, Animator> m_AnimatorDict = new Dictionary<string, Animator>();
	private BeatTimelineJson m_TimelineData;
	private Dictionary<int, BeatUnit> m_BeatUnitById = new Dictionary<int, BeatUnit>();
	private double m_SongStartDsp;
	private double m_PausedDspDuration;
	private double m_SecondsPerBeat;
	private double m_SongOffsetSeconds;
	private bool m_IsScheduled;
	private float m_GoodWindowBeats = 1f / 6f;
	private float m_AudioClipLength;
	private float ShowResultMoment;
	private bool m_ResultShown = false;
	public static BeatGameControl Instance { get; private set; }
	public int CurrentBeat = -1;
	private UIBeatGuideControl m_BeatGuide;
	public bool IsCurBeatPressed = false;
	private SoundEffectControl m_SoundEffectControl;

	public AudioSource m_BeatSource;
	public List<string> SpaceAnimNames = new List<string>();
	public List<Animator> PlayerAnimators = new List<Animator>();
	public List<AudioClip> SpaceAudioClips = new List<AudioClip>();

	public bool IsDedugMode = true;


	bool IsPlayedHit = false;

	public bool IsKeepPressGame = false;

	public int TotalScore = 0;
	public int ComboNum = 0;

	public static EResType GetResType()
	{
		return EResType.None;
	}

	protected override void OnInit()
	{
		base.OnInit();
		m_View = CreateView<BeatGameView>();
		Instance = this;
		if (m_View != null) Asset = m_View.Asset;
	}

	private void Start()
	{
		SetData();
	}


	public void SetData()
	{
		AudioSource[] sources = GameObject.FindObjectsByType<AudioSource>(FindObjectsSortMode.None);
		if (sources != null && sources.Length > 0)
		{
			m_BeatSource = sources[0];
			if (sources.Length > 1)
			{
				Debug.LogWarning("Multiple AudioSource found. Using the first one: " + m_BeatSource.gameObject.name);
			}
		}

		if (m_BeatSource != null && m_BeatSource.isPlaying)
		{
			m_BeatSource.Stop();
		}

		if (m_BeatSource != null && m_BeatSource.clip != null)
		{
			m_AudioClipLength = m_BeatSource.clip.length;
		}

		m_SoundEffectControl = Asset.CreateLevelObject<SoundEffectControl>(Vector3.zero);
		m_SoundEffectControl.SetData();

		UICounterControl counter = Asset.OpenUI<UICounterControl>();
		counter.SetData(StartGame, m_SoundEffectControl);
	}

	private void StartGame()
	{
		Animator[] animators = GameObject.FindObjectsByType<Animator>(FindObjectsSortMode.None);
		for (int i = 0; i < animators.Length; i++)
		{
			Animator a = animators[i];
			GameObject go = a.gameObject;
			m_AnimatorDict[go.name] = a;
		}



		if (m_BeatSource != null && m_BeatSource.clip != null)
		{
			string audioName = m_BeatSource.clip.name;
			string folder = Path.Combine(Application.dataPath, "BeatExports");
			string file = audioName + "_timeline.json";
			string path = Path.Combine(folder, file);
			if (File.Exists(path))
			{
				string json = File.ReadAllText(path);
				m_TimelineData = JsonUtility.FromJson<BeatTimelineJson>(json);
				m_BeatUnitById.Clear();
				if (m_TimelineData != null && m_TimelineData.BeatUnits != null)
				{
					for (int i = 0; i < m_TimelineData.BeatUnits.Count; i++)
					{
						BeatUnit u = m_TimelineData.BeatUnits[i];
						m_BeatUnitById[u.BeatId] = u;

						if (u.IsHit && m_TimelineData.BeatTimes != null && u.BeatId >= 0 && u.BeatId < m_TimelineData.BeatTimes.Count)
						{
							m_TimelineData.BeatTimes[u.BeatId] += DataSystem.InputExtraTime;
						}
					}
				}
				m_SecondsPerBeat = m_TimelineData.SecondsPerBeat;
				m_SongOffsetSeconds = m_TimelineData.OffsetSeconds;
				m_PausedDspDuration = 0.0;
				double lead = 0.1;
				m_SongStartDsp = AudioSettings.dspTime + lead;
				m_BeatSource.time = 0f;
				m_BeatSource.PlayScheduled(m_SongStartDsp);
				m_IsScheduled = true;
				CurrentBeat = -1;
				ShowResultMoment = Time.time + m_AudioClipLength;

				if (IsDedugMode && m_BeatGuide == null)
				{
					m_BeatGuide = Asset.OpenUI<UIBeatGuideControl>();
				}

			}
			else
			{
				Debug.LogWarning("BeatExports json not found: " + path);
			}
		}
	}

	void PressGameCheck(int newBeat)
	{
		bool press = Input.GetKeyDown(KeyCode.Space);
		if (press)
		{
			IsCurBeatPressed = true;
		}

		var curBeatUnit = GetBeatUnit(CurrentBeat);
		if (newBeat != CurrentBeat)
		{
			IsPlayedHit = false;
			var newBeatUnit = GetBeatUnit(newBeat);
			CurrentBeat = newBeat;

			if (newBeatUnit != null && newBeatUnit.IsTutor && m_BeatGuide != null)
			{
				m_BeatGuide?.SetData(m_BeatUnitById, newBeatUnit.BeatId, newBeatUnit.TutorEndId);
			}
			m_BeatGuide?.UpdateBeatTip(CurrentBeat);

			if (newBeatUnit != null && !string.IsNullOrEmpty(newBeatUnit.SoundName))
			{
				if (newBeatUnit.IsHit == false)
				{
					PlaySound(newBeatUnit.SoundName);
				}
				else
				{
					if (press)
					{


					}
				}
			}

			// Pressed Too Late
			if (curBeatUnit != null && curBeatUnit.IsHit && IsCurBeatPressed == false)
			{
				PlayHitCheckBeat(curBeatUnit, false);
			}

			// Pressed Too Quick
			if (newBeatUnit != null && newBeatUnit.IsHit && IsCurBeatPressed == true)
			{
				IsPlayedHit = true;
				PlayHitCheckBeat(newBeatUnit, false);
			}
			else
			{
				IsCurBeatPressed = false;
			}

			curBeatUnit = newBeatUnit;
			PlayNormalBeat(curBeatUnit);
		}

		if (press && (curBeatUnit == null || curBeatUnit.IsEmpty()))
		{
			PlaySpaceAnimations();
		}

		if (curBeatUnit != null && curBeatUnit.IsHit)
		{
			if (IsCurBeatPressed)
			{
				if (IsPlayedHit == false)
				{
					IsPlayedHit = true;
					double clipTime = AudioSettings.dspTime - m_SongStartDsp - m_PausedDspDuration;
					double beatTime = m_TimelineData.GetTimeOfBeat(CurrentBeat);
					bool hit = clipTime < beatTime;
					PlayHitCheckBeat(curBeatUnit, true);
					PlaySound(curBeatUnit.SoundName);
				}
			}
		}
	}

	private void Update()
	{
		if (m_BeatSource == null || m_TimelineData == null || !m_IsScheduled)
		{
			return;
		}
		if (AudioSettings.dspTime < m_SongStartDsp)
		{
			return;
		}

		if (!m_ResultShown && Time.time >= ShowResultMoment)
		{
			m_ResultShown = true;
			UIBeatResultControl result = Asset.OpenUI<UIBeatResultControl>();
			result.SetData(TotalScore);
		}

		double dsp = AudioSettings.dspTime;
		double playerBeat = (dsp - m_SongStartDsp - m_PausedDspDuration - m_SongOffsetSeconds) / m_SecondsPerBeat;
		int newBeat = (int)System.Math.Round(playerBeat);

		if (IsKeepPressGame == false)
		{
			PressGameCheck(newBeat);
		}
		else
		{
			KeepPressGameCheck(newBeat);
		}
	}

	public bool IsKeepPressSpace;

	void KeepPressGameCheck(int newBeat)
	{
		bool IsSoundStart = false;
		if (newBeat != CurrentBeat)
		{
			IsSoundStart = true;

			var oldBeat = GetBeatUnit(CurrentBeat);

			if (oldBeat != null && oldBeat.IsHit && IsKeepPressSpace)
			{
				PlayHitCheckBeat(oldBeat, false);
			}

			CurrentBeat = newBeat;
			IsKeepPressSpace = true;
			IsPlayedHit = false;
		}

		bool isSpacePressed = Input.GetKey(KeyCode.Space);

		if (isSpacePressed == false)
		{
			IsKeepPressSpace = false;
		}

		var curBeatUnit = GetBeatUnit(CurrentBeat);

		if (curBeatUnit != null && curBeatUnit.IsTutor)
		{
			m_BeatGuide.SetData(m_BeatUnitById, curBeatUnit.BeatId, curBeatUnit.TutorEndId);
		}

		if (IsSoundStart && curBeatUnit != null && !string.IsNullOrEmpty(curBeatUnit.SoundName) && curBeatUnit.IsHit == false)
		{
			PlaySound(curBeatUnit.SoundName);
		}
		// Case 2: hit beat logic
		if (curBeatUnit != null && curBeatUnit.IsHit)
		{
			// if (IsKeepPressSpace && IsPlayedHit == false)
			// {
			// 	IsPlayedHit = true;
			// 	YActionSystem.Instance.DispatchAction(EActionId.FailKeepAnim);
			// 	PlayHitCheckBeat(curBeatUnit, false);
			// }
			if (IsKeepPressSpace == false && IsPlayedHit == false)
			{
				IsPlayedHit = true;
				PlayHitCheckBeat(curBeatUnit, true);
				PlaySound(curBeatUnit.SoundName);
				YActionSystem.Instance.DispatchAction(EActionId.SucceedKeepAnim);
			}
		}


		m_BeatGuide?.UpdateBeatTip(CurrentBeat);
		var newBeatUnit = GetBeatUnit(CurrentBeat);



		if (newBeatUnit != null && newBeatUnit.IsHit == false && newBeatUnit.IsEmpty() == false)
		{
			if (IsPlayedHit == false)
			{
				IsPlayedHit = true;
				if (IsKeepPressSpace)
				{
					PlayNormalBeat(newBeatUnit);
				}
				else
				{
					PlaySpaceAnimations();
				}
			}
		}

		if (newBeatUnit == null || newBeatUnit.IsEmpty() == true)
		{
			if (IsPlayedHit == false)
			{
				IsPlayedHit = true;
				if (IsKeepPressSpace == false)
				{
					PlaySpaceAnimations();
				}
				else
				{

				}
			}

		}
	}


	void PlayNormalBeat(BeatUnit newBeatUnit)
	{
		if (newBeatUnit != null && newBeatUnit.IsHit == false && newBeatUnit.AnimList != null && newBeatUnit.AnimList.Count != 0)
		{
			for (int i = 0; i < newBeatUnit.SceneObjects.Count; i++)
			{
				string goName = newBeatUnit.SceneObjects[i];
				string anim = newBeatUnit.AnimList[i];
				Animator a = GetAnimator(goName);
				if (a != null)
				{
					Debug.Log("CrossFade: " + goName + " " + anim);
					a.CrossFade(anim, 0, 0);
				}
			}
		}
	}

	private void PlayHitCheckBeat(BeatUnit unit, bool hit)
	{
		if (unit == null) return;

		if (hit)
		{
			ComboNum++;
			float score = DataSystem.CalculateFinalScore(ComboNum);
			TotalScore += (int)score;
		}
		else
		{
			ComboNum = 0;
		}

		if (unit.IsHit)
		{
			for (int i = 0; i < unit.SceneObjects.Count; i++)
			{
				bool play = hit ? (i % 2 == 0) : (i % 2 == 1);
				if (!play) continue;
				string goName = unit.SceneObjects[i];
				string anim = unit.AnimList[i];
				Animator a = GetAnimator(goName);
				if (a != null)
				{
					a.CrossFade(anim, 0, 0);
					Debug.Log("CrossFade: " + goName + " " + anim);

				}
			}
		}
	}

	public Animator GetAnimator(string name)
	{
		if (string.IsNullOrEmpty(name)) return null;
		Animator a;
		if (m_AnimatorDict.TryGetValue(name, out a)) return a;
		return null;
	}

	public BeatUnit GetBeatUnit(int beatId)
	{
		BeatUnit u;
		if (m_BeatUnitById.TryGetValue(beatId, out u)) return u;
		return null;
	}

	private void PlaySound(string soundName)
	{
		m_SoundEffectControl.PlayOneShot(soundName);
		Debug.Log("PlaySound: " + soundName);
	}

	private void PlaySpaceAnimations()
	{
		if (PlayerAnimators != null && SpaceAnimNames != null)
		{
			int count = Mathf.Min(PlayerAnimators.Count, SpaceAnimNames.Count);
			for (int i = 0; i < count; i++)
			{
				if (PlayerAnimators[i] != null && !string.IsNullOrEmpty(SpaceAnimNames[i]))
				{
					PlayerAnimators[i].CrossFade(SpaceAnimNames[i], 0, 0);
				}
			}
		}

		if (m_SoundEffectControl != null && SpaceAudioClips != null)
		{
			for (int i = 0; i < SpaceAudioClips.Count; i++)
			{
				if (SpaceAudioClips[i] != null)
				{
					m_SoundEffectControl.PlayOneShot(SpaceAudioClips[i]);
				}
			}
		}
	}
}