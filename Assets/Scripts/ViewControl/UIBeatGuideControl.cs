//This File Is Auto Generated By Process Control
using UnityEngine;
using System.Collections.Generic;

public class UIBeatGuideControl : YViewControl
{
	private UIBeatGuideView m_View;
	private Dictionary<int, BeatUnit> m_Units;
	private Dictionary<int, UIBeatTipControl> m_Tips = new Dictionary<int, UIBeatTipControl>();
	private List<UIBeatTipControl> m_PoolTips = new List<UIBeatTipControl>();
	private int m_EndTutorId;
	private int m_StartTutorId;
	private SoundEffectControl m_SoundEffectControl;
	private int m_LastPlayedIndex = -1;
	private bool m_UseUITutor;
	private bool m_UseSoundTutor;

	public static EResType GetResType()
	{
		return EResType.UIBeatGuide;
	}

	protected override void OnInit()
	{
		base.OnInit();
		m_View = CreateView<UIBeatGuideView>();
	}

	private UIBeatTipControl GetOrCreateTip()
	{
		for (int i = 0; i < m_PoolTips.Count; i++)
		{
			if (!m_PoolTips[i].gameObject.activeSelf)
			{
				m_PoolTips[i].gameObject.SetActive(true);
				m_PoolTips[i].transform.SetParent(m_View.TipRoot);
				return m_PoolTips[i];
			}
		}

		var tip = Asset.OpenUI<UIBeatTipControl>(m_View.TipRoot);
		m_PoolTips.Add(tip);
		return tip;
	}

	public void SetData(Dictionary<int, BeatUnit> units, int startTutorId, int endTutorId, SoundEffectControl soundEffectControl)
	{
		m_Units = units;
		m_EndTutorId = endTutorId;
		m_StartTutorId = startTutorId;
		m_SoundEffectControl = soundEffectControl;
		m_LastPlayedIndex = -1;

		if (BeatGameControl.Instance != null && BeatGameControl.Instance.IsDedugMode)
		{
			m_UseUITutor = true;
			m_UseSoundTutor = true;
		}
		else
		{
			DataLevel dataLevel = DataSystem.Instance.GetDataLevel();
			m_UseUITutor = dataLevel.UseTutorUI;
			m_UseSoundTutor = dataLevel.UseTutorSound;
		}

		foreach (var kvp in m_Tips)
		{
			kvp.Value.gameObject.SetActive(false);
		}
		m_Tips.Clear();

		if (m_UseUITutor)
		{
			int count = endTutorId - startTutorId + 1;
			for (int i = 0; i < count; i++)
			{
				int tutorId = startTutorId + i;
				BeatUnit beatUnit = null;
				if (m_Units != null)
				{
					m_Units.TryGetValue(tutorId, out beatUnit);
				}

				var tip = GetOrCreateTip();
				m_Tips[tutorId] = tip;
				bool isTip = false;
				bool isHit = false;
				if (beatUnit != null)
				{
					isHit = beatUnit.IsHit;
					isTip = beatUnit != null && beatUnit.IsEmpty() == false;
				}
				tip.SetData(isHit, isTip);
				tip.SetData(tutorId);
				tip.ShowBg(false);
			}
		}
	}

	public void UpdateBeatTip(int curBeatIndex)
	{
		if (m_Tips == null) return;

		if (curBeatIndex > m_EndTutorId)
		{
			if (m_UseUITutor)
			{
				foreach (var kvp in m_Tips)
				{
					kvp.Value.gameObject.SetActive(false);
				}
			}
			return;
		}

		if (m_UseSoundTutor && curBeatIndex >= m_StartTutorId && curBeatIndex <= m_EndTutorId)
		{
			BeatUnit beatUnit = null;
			if (m_Units != null)
			{
				m_Units.TryGetValue(curBeatIndex, out beatUnit);
			}

			if (beatUnit == null || !beatUnit.IsHit)
			{
				int audioIndex = curBeatIndex - m_StartTutorId + 1;
				if (audioIndex != m_LastPlayedIndex && m_SoundEffectControl != null)
				{
					string audioName = "Voice_girl_0" + audioIndex;
					m_SoundEffectControl.PlayOneShot(audioName);
					m_LastPlayedIndex = audioIndex;
				}
			}
		}

		if (m_UseUITutor)
		{
			foreach (var kvp in m_Tips)
			{
				int tutorId = kvp.Key;
				UIBeatTipControl tip = kvp.Value;
				tip.ShowBg(tutorId == curBeatIndex);
			}
		}
	}

	protected override void OnReturn()
	{
		base.OnReturn();
	}
}